This is XeTeX, Version 3.14159265-2.6-0.99998 (TeX Live 2017/W32TeX) (preloaded format=xelatex 2017.11.14)  14 NOV 2017 22:13
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**./main.tex
(./main.tex
LaTeX2e <2017-04-15>
Babel <3.15> and hyphenation patterns for 84 language(s) loaded.
(./tufte-book.cls
Document Class: tufte-book 2009/12/11 v3.5.0 Tufte-book class
(./tufte-common.def
File: tufte-common.def 2009/12/11 v3.5.0 Common code for the Tufte-LaTeX styles

 (d:/texlive/2017/texmf-dist/tex/latex/xkeyval/xkeyval.sty
Package: xkeyval 2014/12/03 v2.7a package option processing (HA)

(d:/texlive/2017/texmf-dist/tex/generic/xkeyval/xkeyval.tex
(d:/texlive/2017/texmf-dist/tex/generic/xkeyval/xkvutils.tex
\XKV@toks=\toks14
\XKV@tempa@toks=\toks15

(d:/texlive/2017/texmf-dist/tex/generic/xkeyval/keyval.tex))
\XKV@depth=\count79
File: xkeyval.tex 2014/12/03 v2.7a key=value parser (HA)
))
(d:/texlive/2017/texmf-dist/tex/latex/xifthen/xifthen.sty
Package: xifthen 2015/11/05 v1.4.0 Extended ifthen features

(d:/texlive/2017/texmf-dist/tex/latex/tools/calc.sty
Package: calc 2014/10/28 v4.3 Infix arithmetic (KKT,FJ)
\calc@Acount=\count80
\calc@Bcount=\count81
\calc@Adimen=\dimen102
\calc@Bdimen=\dimen103
\calc@Askip=\skip41
\calc@Bskip=\skip42
LaTeX Info: Redefining \setlength on input line 80.
LaTeX Info: Redefining \addtolength on input line 81.
\calc@Ccount=\count82
\calc@Cskip=\skip43
)
(d:/texlive/2017/texmf-dist/tex/latex/base/ifthen.sty
Package: ifthen 2014/09/29 v1.1c Standard LaTeX ifthen package (DPC)
)
(d:/texlive/2017/texmf-dist/tex/latex/ifmtarg/ifmtarg.sty
Package: ifmtarg 2009/09/02 v1.2a check for an empty argument
))
Class tufte-book Info: Loading the base class `book'.

(d:/texlive/2017/texmf-dist/tex/latex/base/book.cls
Document Class: book 2014/09/29 v1.4h Standard LaTeX document class
(d:/texlive/2017/texmf-dist/tex/latex/base/bk10.clo
File: bk10.clo 2014/09/29 v1.4h Standard LaTeX file (size option)
)
\c@part=\count83
\c@chapter=\count84
\c@section=\count85
\c@subsection=\count86
\c@subsubsection=\count87
\c@paragraph=\count88
\c@subparagraph=\count89
\c@figure=\count90
\c@table=\count91
\abovecaptionskip=\skip44
\belowcaptionskip=\skip45
\bibindent=\dimen104
)
(d:/texlive/2017/texmf-dist/tex/generic/oberdiek/ifpdf.sty
Package: ifpdf 2017/03/15 v3.2 Provides the ifpdf switch
)
(d:/texlive/2017/texmf-dist/tex/generic/ifxetex/ifxetex.sty
Package: ifxetex 2010/09/12 v0.6 Provides ifxetex conditional
)
(d:/texlive/2017/texmf-dist/tex/latex/titlesec/titlesec.sty
Package: titlesec 2016/03/21 v2.10.2 Sectioning titles
\ttl@box=\box26
\beforetitleunit=\skip46
\aftertitleunit=\skip47
\ttl@plus=\dimen105
\ttl@minus=\dimen106
\ttl@toksa=\toks16
\titlewidth=\dimen107
\titlewidthlast=\dimen108
\titlewidthfirst=\dimen109
)
(d:/texlive/2017/texmf-dist/tex/latex/titlesec/titletoc.sty
Package: titletoc 2011/12/15 v1.6 TOC entries
\ttl@leftsep=\dimen110
)
(d:/texlive/2017/texmf-dist/tex/latex/hyperref/hyperref.sty
Package: hyperref 2017/03/14 v6.85a Hypertext links for LaTeX

(d:/texlive/2017/texmf-dist/tex/generic/oberdiek/hobsub-hyperref.sty
Package: hobsub-hyperref 2016/05/16 v1.14 Bundle oberdiek, subset hyperref (HO)


(d:/texlive/2017/texmf-dist/tex/generic/oberdiek/hobsub-generic.sty
Package: hobsub-generic 2016/05/16 v1.14 Bundle oberdiek, subset generic (HO)
Package: hobsub 2016/05/16 v1.14 Construct package bundles (HO)
Package: infwarerr 2016/05/16 v1.4 Providing info/warning/error messages (HO)
Package: ltxcmds 2016/05/16 v1.23 LaTeX kernel commands for general use (HO)
Package: ifluatex 2016/05/16 v1.4 Provides the ifluatex switch (HO)
Package ifluatex Info: LuaTeX not detected.
Package: ifvtex 2016/05/16 v1.6 Detect VTeX and its facilities (HO)
Package ifvtex Info: VTeX not detected.
Package: intcalc 2016/05/16 v1.2 Expandable calculations with integers (HO)
Package hobsub Info: Skipping package `ifpdf' (already loaded).
Package: etexcmds 2016/05/16 v1.6 Avoid name clashes with e-TeX commands (HO)
Package etexcmds Info: Could not find \expanded.
(etexcmds)             That can mean that you are not using pdfTeX 1.50 or
(etexcmds)             that some package has redefined \expanded.
(etexcmds)             In the latter case, load this package earlier.
Package: kvsetkeys 2016/05/16 v1.17 Key value parser (HO)
Package: kvdefinekeys 2016/05/16 v1.4 Define keys (HO)
Package: pdftexcmds 2017/03/19 v0.25 Utility functions of pdfTeX for LuaTeX (HO
)
Package pdftexcmds Info: LuaTeX not detected.
Package pdftexcmds Info: pdfTeX >= 1.30 not detected.
Package pdftexcmds Info: \pdf@primitive is available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode not found.
Package: pdfescape 2016/05/16 v1.14 Implements pdfTeX's escape features (HO)
Package: bigintcalc 2016/05/16 v1.4 Expandable calculations on big integers (HO
)
Package: bitset 2016/05/16 v1.2 Handle bit-vector datatype (HO)
Package: uniquecounter 2016/05/16 v1.3 Provide unlimited unique counter (HO)
)
Package hobsub Info: Skipping package `hobsub' (already loaded).
Package: letltxmacro 2016/05/16 v1.5 Let assignment for LaTeX macros (HO)
Package: hopatch 2016/05/16 v1.3 Wrapper for package hooks (HO)
Package: xcolor-patch 2016/05/16 xcolor patch
Package: atveryend 2016/05/16 v1.9 Hooks at the very end of document (HO)
Package atveryend Info: \enddocument detected (standard20110627).
Package: atbegshi 2016/06/09 v1.18 At begin shipout hook (HO)
Package: refcount 2016/05/16 v3.5 Data extraction from label references (HO)
Package: hycolor 2016/05/16 v1.8 Color options for hyperref/bookmark (HO)
)
(d:/texlive/2017/texmf-dist/tex/latex/oberdiek/auxhook.sty
Package: auxhook 2016/05/16 v1.4 Hooks for auxiliary files (HO)
)
(d:/texlive/2017/texmf-dist/tex/latex/oberdiek/kvoptions.sty
Package: kvoptions 2016/05/16 v3.12 Key value format for package options (HO)
)
\@linkdim=\dimen111
\Hy@linkcounter=\count92
\Hy@pagecounter=\count93

(d:/texlive/2017/texmf-dist/tex/latex/hyperref/pd1enc.def
File: pd1enc.def 2017/03/14 v6.85a Hyperref: PDFDocEncoding definition (HO)
)
\Hy@SavedSpaceFactor=\count94

(d:/texlive/2017/texmf-dist/tex/latex/latexconfig/hyperref.cfg
File: hyperref.cfg 2002/06/06 v1.2 hyperref configuration of TeXLive
)
Package hyperref Info: Option `unicode' set `true' on input line 4374.

(d:/texlive/2017/texmf-dist/tex/latex/hyperref/puenc.def
File: puenc.def 2017/03/14 v6.85a Hyperref: PDF Unicode definition (HO)
)
Package hyperref Info: Option `hyperfootnotes' set `false' on input line 4374.
Package hyperref Info: Hyper figures OFF on input line 4498.
Package hyperref Info: Link nesting OFF on input line 4503.
Package hyperref Info: Hyper index ON on input line 4506.
Package hyperref Info: Plain pages OFF on input line 4513.
Package hyperref Info: Backreferencing OFF on input line 4518.
Package hyperref Info: Implicit mode ON; LaTeX internals redefined.
Package hyperref Info: Bookmarks ON on input line 4751.
\c@Hy@tempcnt=\count95

(d:/texlive/2017/texmf-dist/tex/latex/url/url.sty
\Urlmuskip=\muskip10
Package: url 2013/09/16  ver 3.4  Verb mode for urls, etc.
)
LaTeX Info: Redefining \url on input line 5104.
\XeTeXLinkMargin=\dimen112
\Fld@menulength=\count96
\Field@Width=\dimen113
\Fld@charsize=\dimen114
Package hyperref Info: Hyper figures OFF on input line 6358.
Package hyperref Info: Link nesting OFF on input line 6363.
Package hyperref Info: Hyper index ON on input line 6366.
Package hyperref Info: backreferencing OFF on input line 6373.
Package hyperref Info: Link coloring OFF on input line 6378.
Package hyperref Info: Link coloring with OCG OFF on input line 6383.
Package hyperref Info: PDF/A mode OFF on input line 6388.
LaTeX Info: Redefining \ref on input line 6428.
LaTeX Info: Redefining \pageref on input line 6432.
\Hy@abspage=\count97
\c@Item=\count98
)

Package hyperref Message: Driver: hxetex.

(d:/texlive/2017/texmf-dist/tex/latex/hyperref/hxetex.def
File: hxetex.def 2017/03/14 v6.85a Hyperref driver for XeTeX

(d:/texlive/2017/texmf-dist/tex/generic/oberdiek/stringenc.sty
Package: stringenc 2016/05/16 v1.11 Convert strings between diff. encodings (HO
)
)
\pdfm@box=\box27
\c@Hy@AnnotLevel=\count99
\HyField@AnnotCount=\count100
\Fld@listcount=\count101
\c@bookmark@seq@number=\count102

(d:/texlive/2017/texmf-dist/tex/latex/oberdiek/rerunfilecheck.sty
Package: rerunfilecheck 2016/05/16 v1.8 Rerun checks for auxiliary files (HO)
Package rerunfilecheck Info: Feature \pdfmdfivesum is not available
(rerunfilecheck)             (e.g. pdfTeX or LuaTeX with package `pdftexcmds').

(rerunfilecheck)             Therefore file contents cannot be checked efficien
tly
(rerunfilecheck)             and the loading of the package is aborted.
)
\Hy@SectionHShift=\skip48
)

Package hyperref Warning: Option `pagecolor' is not available anymore.

(d:/texlive/2017/texmf-dist/tex/latex/ms/ragged2e.sty
Package: ragged2e 2009/05/21 v2.1 ragged2e Package (MS)

(d:/texlive/2017/texmf-dist/tex/latex/ms/everysel.sty
Package: everysel 2011/10/28 v1.2 EverySelectfont Package (MS)
)
\CenteringLeftskip=\skip49
\RaggedLeftLeftskip=\skip50
\RaggedRightLeftskip=\skip51
\CenteringRightskip=\skip52
\RaggedLeftRightskip=\skip53
\RaggedRightRightskip=\skip54
\CenteringParfillskip=\skip55
\RaggedLeftParfillskip=\skip56
\RaggedRightParfillskip=\skip57
\JustifyingParfillskip=\skip58
\CenteringParindent=\skip59
\RaggedLeftParindent=\skip60
\RaggedRightParindent=\skip61
\JustifyingParindent=\skip62
)
(d:/texlive/2017/texmf-dist/tex/latex/geometry/geometry.sty
Package: geometry 2010/09/12 v5.6 Page Geometry
\Gm@cnth=\count103
\Gm@cntv=\count104
\c@Gm@tempcnt=\count105
\Gm@bindingoffset=\dimen115
\Gm@wd@mp=\dimen116
\Gm@odd@mp=\dimen117
\Gm@even@mp=\dimen118
\Gm@layoutwidth=\dimen119
\Gm@layoutheight=\dimen120
\Gm@layouthoffset=\dimen121
\Gm@layoutvoffset=\dimen122
\Gm@dimlist=\toks17
)
(d:/texlive/2017/texmf-dist/tex/latex/changepage/changepage.sty
Package: changepage 2009/10/20 v1.0c check page and change page layout
\c@cp@cntr=\count106
\cp@tempcnt=\count107
)
\@tufte@overhang=\skip63
\@tufte@fullwidth=\skip64
\@tufte@caption@fill=\skip65

(d:/texlive/2017/texmf-dist/tex/latex/paralist/paralist.sty
Package: paralist 2017/01/22 v2.7 Extended list environments
\pltopsep=\skip66
\plpartopsep=\skip67
\plitemsep=\skip68
\plparsep=\skip69
\pl@lab=\toks18
)
(d:/texlive/2017/texmf-dist/tex/latex/textcase/textcase.sty
Package: textcase 2004/10/07 v0.07 Text only upper/lower case changing (DPC)
)
(d:/texlive/2017/texmf-dist/tex/latex/soul/soul.sty
Package: soul 2003/11/17 v2.4 letterspacing/underlining (mf)
\SOUL@word=\toks19
\SOUL@lasttoken=\toks20
\SOUL@cmds=\toks21
\SOUL@buffer=\toks22
\SOUL@token=\toks23
\SOUL@spaceskip=\skip70
\SOUL@ttwidth=\dimen123
\SOUL@uldp=\dimen124
\SOUL@ulht=\dimen125
)
LaTeX Info: Redefining \allcapsspacing on input line 697.
LaTeX Info: Redefining \smallcapsspacing on input line 697.

(d:/texlive/2017/texmf-dist/tex/latex/setspace/setspace.sty
Package: setspace 2011/12/19 v6.7a set line spacing
)
(d:/texlive/2017/texmf-dist/tex/latex/natbib/natbib.sty
Package: natbib 2010/09/13 8.31b (PWD, AO)
\bibhang=\skip71
\bibsep=\skip72
LaTeX Info: Redefining \cite on input line 694.
\c@NAT@ctr=\count108
)
(d:/texlive/2017/texmf-dist/tex/latex/natbib/bibentry.sty
Package: bibentry 2007/10/30 1.5 (PWD)
) (./main.bbl)
\c@@tufte@num@bibkeys=\count109

(d:/texlive/2017/texmf-dist/tex/latex/sauerj/optparams.sty
Package: optparams 2004/08/14 v0.9 multiple optional parameters in macros
)
\@tufte@sidenote@vertical@offset=\skip73

(d:/texlive/2017/texmf-dist/tex/latex/placeins/placeins.sty
Package: placeins 2005/04/18  v 2.2
)
\@tufte@margin@floatbox=\box28
\@tufte@figure@box=\box29
\@tufte@caption@box=\box30
\@tufte@caption@vertical@offset=\skip74
\@tufte@float@contents@width=\skip75

(d:/texlive/2017/texmf-dist/tex/latex/fancyhdr/fancyhdr.sty
Package: fancyhdr 2017/06/30 v3.9a Extensive control of page headers and footer
s
\f@nch@headwidth=\skip76
\f@nch@O@elh=\skip77
\f@nch@O@erh=\skip78
\f@nch@O@olh=\skip79
\f@nch@O@orh=\skip80
\f@nch@O@elf=\skip81
\f@nch@O@erf=\skip82
\f@nch@O@olf=\skip83
\f@nch@O@orf=\skip84
)
(d:/texlive/2017/texmf-dist/tex/latex/xcolor/xcolor.sty
Package: xcolor 2016/05/11 v2.12 LaTeX color extensions (UK)

(d:/texlive/2017/texmf-dist/tex/latex/graphics-cfg/color.cfg
File: color.cfg 2016/01/02 v1.6 sample color configuration
)
Package xcolor Info: Package option `usenames' ignored on input line 216.
Package xcolor Info: Driver file: xetex.def on input line 225.

(d:/texlive/2017/texmf-dist/tex/latex/graphics-def/xetex.def
File: xetex.def 2017/06/24 v5.0h Graphics/color driver for xetex
)
Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1348.
Package xcolor Info: Model `RGB' extended on input line 1364.
Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1366.
Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1367.
Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1368.
Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1369.
Package xcolor Info: Model `Gray' substituted by `gray' on input line 1370.
Package xcolor Info: Model `wave' substituted by `hsb' on input line 1371.

(d:/texlive/2017/texmf-dist/tex/latex/graphics/dvipsnam.def
File: dvipsnam.def 2016/06/17 v3.0m Driver-dependent file (DPC,SPQR)
)
(d:/texlive/2017/texmf-dist/tex/latex/xcolor/svgnam.def
File: svgnam.def 2016/05/11 v2.12 Predefined colors according to SVG 1.1 (UK)
))
\langwohyphens=\language84

(d:/texlive/2017/texmf-dist/tex/latex/tools/multicol.sty
Package: multicol 2017/04/11 v1.8q multicolumn formatting (FMi)
\c@tracingmulticols=\count110
\mult@box=\box31
\multicol@leftmargin=\dimen126
\c@unbalance=\count111
\c@collectmore=\count112
\doublecol@number=\count113
\multicoltolerance=\count114
\multicolpretolerance=\count115
\full@width=\dimen127
\page@free=\dimen128
\premulticols=\dimen129
\postmulticols=\dimen130
\multicolsep=\skip85
\multicolbaselineskip=\skip86
\partial@page=\box32
\last@line=\box33
\maxbalancingoverflow=\dimen131
\mult@rightbox=\box34
\mult@grightbox=\box35
\mult@gfirstbox=\box36
\mult@firstbox=\box37
\@tempa=\box38
\@tempa=\box39
\@tempa=\box40
\@tempa=\box41
\@tempa=\box42
\@tempa=\box43
\@tempa=\box44
\@tempa=\box45
\@tempa=\box46
\@tempa=\box47
\@tempa=\box48
\@tempa=\box49
\@tempa=\box50
\@tempa=\box51
\@tempa=\box52
\@tempa=\box53
\@tempa=\box54
\c@columnbadness=\count116
\c@finalcolumnbadness=\count117
\last@try=\dimen132
\multicolovershoot=\dimen133
\multicolundershoot=\dimen134
\mult@nat@firstbox=\box55
\colbreak@box=\box56
\mc@col@check@num=\count118
)))
Package hyperref Info: Option `colorlinks' set `true' on input line 28.

(d:/texlive/2017/texmf-dist/tex/latex/microtype/microtype.sty
Package: microtype 2017/07/07 v2.7 Micro-typographical refinements (RS)
\MT@toks=\toks24
\MT@count=\count119
LaTeX Info: Redefining \textls on input line 789.
\MT@outer@kern=\dimen135
LaTeX Info: Redefining \textmicrotypecontext on input line 1334.
\MT@listname@count=\count120

(d:/texlive/2017/texmf-dist/tex/latex/microtype/microtype-xetex.def
File: microtype-xetex.def 2017/07/07 v2.7 Definitions specific to xetex (RS)
LaTeX Info: Redefining \lsstyle on input line 255.
)
Package microtype Info: Loading configuration file microtype.cfg.

(d:/texlive/2017/texmf-dist/tex/latex/microtype/microtype.cfg
File: microtype.cfg 2017/07/07 v2.7 microtype main configuration file (RS)
))
(d:/texlive/2017/texmf-dist/tex/latex/lipsum/lipsum.sty
Package: lipsum 2014/07/27 v1.3 150 paragraphs of Lorem Ipsum dummy text
\c@lips@count=\count121
)
(d:/texlive/2017/texmf-dist/tex/latex/booktabs/booktabs.sty
Package: booktabs 2016/04/27 v1.618033 publication quality tables
\heavyrulewidth=\dimen136
\lightrulewidth=\dimen137
\cmidrulewidth=\dimen138
\belowrulesep=\dimen139
\belowbottomsep=\dimen140
\aboverulesep=\dimen141
\abovetopsep=\dimen142
\cmidrulesep=\dimen143
\cmidrulekern=\dimen144
\defaultaddspace=\dimen145
\@cmidla=\count122
\@cmidlb=\count123
\@aboverulesep=\dimen146
\@belowrulesep=\dimen147
\@thisruleclass=\count124
\@lastruleclass=\count125
\@thisrulewidth=\dimen148
)
(d:/texlive/2017/texmf-dist/tex/latex/graphics/graphicx.sty
Package: graphicx 2017/06/01 v1.1a Enhanced LaTeX Graphics (DPC,SPQR)

(d:/texlive/2017/texmf-dist/tex/latex/graphics/graphics.sty
Package: graphics 2017/06/25 v1.2c Standard LaTeX Graphics (DPC,SPQR)

(d:/texlive/2017/texmf-dist/tex/latex/graphics/trig.sty
Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
)
(d:/texlive/2017/texmf-dist/tex/latex/graphics-cfg/graphics.cfg
File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
)
Package graphics Info: Driver file: xetex.def on input line 99.
)
\Gin@req@height=\dimen149
\Gin@req@width=\dimen150
)
(d:/texlive/2017/texmf-dist/tex/latex/fancyvrb/fancyvrb.sty
Package: fancyvrb 2008/02/07

Style option: `fancyvrb' v2.7a, with DG/SPQR fixes, and firstline=lastline fix 
<2008/02/07> (tvz)
\FV@CodeLineNo=\count126
\FV@InFile=\read1
\FV@TabBox=\box57
\c@FancyVerbLine=\count127
\FV@StepNumber=\count128
\FV@OutFile=\write3
) (d:/texlive/2017/texmf-dist/tex/latex/tools/xspace.sty
Package: xspace 2014/10/28 v1.13 Space after command names (DPC,MH)
)
(d:/texlive/2017/texmf-dist/tex/latex/units/units.sty
Package: units 1998/08/04 v0.9b Typesetting units

(d:/texlive/2017/texmf-dist/tex/latex/units/nicefrac.sty
Package: nicefrac 1998/08/04 v0.9b Nice fractions
\L@UnitsRaiseDisplaystyle=\skip87
\L@UnitsRaiseTextstyle=\skip88
\L@UnitsRaiseScriptstyle=\skip89
))
(d:/texlive/2017/texmf-dist/tex/latex/base/makeidx.sty
Package: makeidx 2014/09/29 v1.0m Standard LaTeX package
)
\@indexfile=\write4
\openout4 = `main.idx'.


Writing index file main.idx
(./main.aux)
\openout1 = `main.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for TU/lmr/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for PD1/pdf/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
LaTeX Font Info:    Checking defaults for PU/pdf/m/n on input line 138.
LaTeX Font Info:    ... okay on input line 138.
\AtBeginShipoutBox=\box58
Package hyperref Info: Link coloring ON on input line 138.
 (d:/texlive/2017/texmf-dist/tex/latex/hyperref/nameref.sty
Package: nameref 2016/05/21 v2.44 Cross-referencing by name of section

(d:/texlive/2017/texmf-dist/tex/generic/oberdiek/gettitlestring.sty
Package: gettitlestring 2016/05/16 v1.5 Cleanup title references (HO)
)
\c@section@level=\count129
)
LaTeX Info: Redefining \ref on input line 138.
LaTeX Info: Redefining \pageref on input line 138.
LaTeX Info: Redefining \nameref on input line 138.

(./main.out) (./main.out)
\@outlinefile=\write5
\openout5 = `main.out'.

 ABD: EverySelectfont initializing macros
LaTeX Info: Redefining \selectfont on input line 138.

*geometry* driver: auto-detecting
*geometry* detected driver: xetex
*geometry* verbose mode - [ preamble ] result:
* driver: xetex
* paper: letterpaper
* layout: <same size as paper>
* layoutoffset:(h,v)=(0.0pt,0.0pt)
* modes: twoside asymmetric 
* h-part:(L,W,R)=(72.26999pt, 312.0pt, 230.02501pt)
* v-part:(T,H,B)=(72.26999pt, 616.0pt, 106.7pt)
* \paperwidth=614.295pt
* \paperheight=794.96999pt
* \textwidth=312.0pt
* \textheight=616.0pt
* \oddsidemargin=0.0pt
* \evensidemargin=0.0pt
* \topmargin=-42.0pt
* \headheight=14.0pt
* \headsep=28.0pt
* \topskip=10.0pt
* \footskip=25.29494pt
* \marginparwidth=144.0pt
* \marginparsep=24.0pt
* \columnsep=10.0pt
* \skip\footins=9.0pt plus 4.0pt minus 2.0pt
* \hoffset=0.0pt
* \voffset=0.0pt
* \mag=1000
* \@twocolumnfalse
* \@twosidetrue
* \@mparswitchfalse
* \@reversemarginfalse
* (1in=72.27pt=25.4mm, 1cm=28.453pt)

LaTeX Info: Redefining \microtypecontext on input line 138.
Package microtype Info: Character protrusion enabled (level 2).
Package microtype Info: Using default protrusion set `alltext'.
Package microtype Info: No adjustment of tracking.
Package microtype Info: No adjustment of spacing.
Package microtype Info: No adjustment of kerning.
(d:/texlive/2017/texmf-dist/tex/latex/microtype/mt-LatinModernRoman.cfg
File: mt-LatinModernRoman.cfg 2013/03/13 v1.0 microtype config. file: Latin Mod
ern Roman (RS)
)
Package microtype Info: Loading generic protrusion settings for font family
(microtype)             `lmss' (encoding: TU).
(microtype)             For optimal results, create family-specific settings.
(microtype)             See the microtype manual for details.

! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!

LaTeX Font Warning: Font shape `TU/lmss/m/I' undefined
(Font)              using `TU/lmss/m/n' instead on input line 147.

! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

LaTeX Font Info:    Font shape `TU/lmss/m/it' in size <10.95> not available
(Font)              Font shape `TU/lmss/m/sl' tried instead on input line 147.
! Argument of \MT@res@a has an extra }.
<inserted text> 
                \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
##1,\TU/lmss/m/it/10.95 ,##2##3\@nnil {\ifx ##2\@empty \MT@inlist@false \ETC.
! Paragraph ended before \MT@res@a was complete.
<to be read again> 
                   \par 
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\fontshape ->\protect \fontshape  
                                  
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\selectfont ->\protect \selectfont  
                                    
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Extra \else.
\SOUL@analyze ...henchar }\SOUL@everyhyphen \else 
                                                  \SOUL@dosyllable \fi \fi }
l.147 ...Rand, {\itshape Design, Form, and Chaos}}
                                                  
I'm ignoring this; it doesn't match any \if.

! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.149 ...take away.}{Antoine de Saint-Exup\'{e}ry}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no … in font ectt1000!
Missing character: There is no … in font ectt1000!
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\ldots ->\protect \dots  
                         
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

[1


]
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.151 ...hy they were important.}{Donald E. Knuth}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans10-regular]:mapping=tex-text;!
[2]
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.155 \maketitle
                 % Print the title page
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.155 \maketitle
                 % Print the title page
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.155 \maketitle
                 % Print the title page
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.155 \maketitle
                 % Print the title page
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans17-regular]:mapping=tex-text;!

Overfull \hbox (91.53229pt too wide) in paragraph at lines 155--155
[]\TU/lmss/m/n/36 - A Tufte-Style Book|(soul)                Pack- 
 []


Overfull \hbox (6.97116pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 failedSee the soul package doc- 
 []


Overfull \hbox (40.27135pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 umentation for explanation.I came 
 []


Overfull \hbox (13.59535pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 across hyphenatable material en- 
 []


Overfull \hbox (13.85893pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 I can’t handle. Either drop the 
 []


Overfull \hbox (138.37114pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 braces or make the material
unbreakable 
 []


Overfull \hbox (7.63113pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 using an \mbox (\hbox). Note 
 []


Overfull \hbox (27.38292pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 that a space
also counts as pos- 
 []


Overfull \hbox (46.87112pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 sible hyphenation point. See page 
 []


Overfull \hbox (25.22272pt too wide) in paragraph at lines 155--155
\TU/lmss/m/n/36 a black square so that you can 
 []


Underfull \vbox (badness 10000) has occurred while \output is active []

 [3

]
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.155 \maketitle
                 % Print the title page
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.155 \maketitle
                 % Print the title page
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.155 \maketitle
                 % Print the title page
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.155 \maketitle
                 % Print the title page
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmsans12-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans12-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans12-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmsans12-regular]:mapping=tex-text;!
[4]
! Bad character code (-815).
<to be read again> 
                   h
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
A Unicode scalar value must be between 0 and "10FFFF.
I changed this one to zero.

Package microtype Info: Character `/two.oldstyle' is missing
(microtype)             in font `TU/lmr/m/sc/10'.
(microtype)             Ignoring protrusion settings for this character.
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.169 ...allcaps{Published by \thanklesspublisher}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!

Overfull \hbox (21.67998pt too wide) in paragraph at lines 169--170
\TU/lmr/m/sc/10 mentation for explanation.I came across hyphenatable material e
nclosed in group braces,
which 
 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.171 \par\smallcaps{tufte-latex.googlecode.com}
                                                
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!

Overfull \hbox (21.67998pt too wide) in paragraph at lines 171--172
\TU/lmr/m/sc/10 mentation for explanation.I came across hyphenatable material e
nclosed in group braces,
which 
 []

Package microtype Info: Loading generic protrusion settings for font family
(microtype)             `lmtt' (encoding: TU).
(microtype)             For optimal results, create family-specific settings.
(microtype)             See the microtype manual for details.
(d:/texlive/2017/texmf-dist/tex/latex/microtype/mt-cmr.cfg
File: mt-cmr.cfg 2013/05/19 v2.2 microtype config. file: Computer Modern Roman 
(RS)
)
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 173.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line 173.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.173 ...OUT WARRANTIES OR CONDITIONS OF ANY KIND}
                                                  , either express or implie...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
[5

] [6

] (./main.toc)
\tf@toc=\write6
\openout6 = `main.toc'.

 [7] [8

] (./main.lof)
\tf@lof=\write7
\openout7 = `main.lof'.

 [9] [10

] (./main.lot
Overfull \hbox (59.22807pt too wide) in paragraph at lines 2--2
 [][] [][][]\TU/lmr/m/n/10 A list of L[]T[]X font sizes as defined by the Tufte
-L[]T[]X document classes.[][] 21 
 []


Overfull \hbox (31.73001pt too wide) in paragraph at lines 6--6
 [][] [][][]\TU/lmr/m/n/10 Here are the dimensions of the various margins used 
in the Tufte-handout
 []

)
\tf@lot=\write8
\openout8 = `main.lot'.

 [11] [12

]
LaTeX Font Info:    Calculating math sizes for size <18> on input line 199.


LaTeX Font Warning: Font shape `OT1/cmr/m/n' in size <18> not available
(Font)              size <17.28> substituted on input line 199.


LaTeX Font Warning: Font shape `OT1/cmr/m/n' in size <12.59995> not available
(Font)              size <12> substituted on input line 199.


LaTeX Font Warning: Font shape `OML/cmm/m/it' in size <18> not available
(Font)              size <17.28> substituted on input line 199.


LaTeX Font Warning: Font shape `OML/cmm/m/it' in size <12.59995> not available
(Font)              size <12> substituted on input line 199.


LaTeX Font Warning: Font shape `OMS/cmsy/m/n' in size <18> not available
(Font)              size <17.28> substituted on input line 199.


LaTeX Font Warning: Font shape `OMS/cmsy/m/n' in size <12.59995> not available
(Font)              size <12> substituted on input line 199.

LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <18> on input line 199.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <12.59995> on input line 199.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <9> on input line 199.
[13] [14

]
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <8> on input line 211.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <6> on input line 211.


LaTeX Warning: Marginpar on page 15 moved.

[15

] [16

]
Overfull \hbox (12.0pt too wide) in paragraph at lines 229--252
[]$[]$ 
 []

[17

]
File: graphics/vdqi-title.pdf Graphic file (type pdf)
<use graphics/vdqi-title.pdf>
File: graphics/ei-title.pdf Graphic file (type pdf)
<use graphics/ei-title.pdf>
File: graphics/ve-title.pdf Graphic file (type pdf)
<use graphics/ve-title.pdf>
File: graphics/be-title.pdf Graphic file (type pdf)
<use graphics/be-title.pdf>
File: graphics/vdqi-contents.pdf Graphic file (type pdf)
<use graphics/vdqi-contents.pdf>
File: graphics/ei-contents.pdf Graphic file (type pdf)
<use graphics/ei-contents.pdf>
File: graphics/ve-contents.pdf Graphic file (type pdf)
<use graphics/ve-contents.pdf>
File: graphics/be-contents.pdf Graphic file (type pdf)
<use graphics/be-contents.pdf>

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.327 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.327 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.327 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.327 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.327 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[18]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.327 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.327 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.327 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.327 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.327 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[19]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.327 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.327 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.327 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.327 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.327 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.327 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.327 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.327 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.327 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[20]
! Bad character code (-815).
<to be read again> 
                   h
l.344 \verb+\large+ & 11 & 15 & \textsc{b}
                                          -heads \\
A Unicode scalar value must be between 0 and "10FFFF.
I changed this one to zero.

Package microtype Info: Character `/two.oldstyle' is missing
(microtype)             in font `TU/lmr/m/sc/8'.
(microtype)             Ignoring protrusion settings for this character.

Overfull \hbox (7.32005pt too wide) in paragraph at lines 335--351
 [] 
 []


LaTeX Warning: Marginpar on page 21 moved.


Overfull \hbox (16.60065pt too wide) in paragraph at lines 392--402
 [] 
 []


LaTeX Warning: `h' float specifier changed to `ht'.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[21]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.411 \chapter
              [On the Use of the tufte-book Document Class]{On the Use of th...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[22]
Overfull \hbox (14.12013pt too wide) in paragraph at lines 420--421
\TU/lmr/m/n/10 This style provides \TU/lmr/m/sc/10 a\TU/lmr/m/n/10 - and \TU/lm
r/m/sc/10 b\TU/lmr/m/n/10 -heads (that is, [] and []), 
 []


LaTeX Warning: Marginpar on page 23 moved.


LaTeX Warning: Marginpar on page 23 moved.


LaTeX Warning: Marginpar on page 23 moved.

[23

]

LaTeX Warning: Marginpar on page 24 moved.


LaTeX Warning: Marginpar on page 24 moved.


LaTeX Warning: Marginpar on page 24 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.481 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.481 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.481 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.481 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.481 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.481 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.481 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.481 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.481 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.481 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.481 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.481 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.481 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[24]
File: graphics/helix.pdf Graphic file (type pdf)
<use graphics/helix.pdf>
File: graphics/sine.pdf Graphic file (type pdf)
<use graphics/sine.pdf>

Underfull \hbox (badness 10000) in paragraph at lines 512--516

 []

File: graphics/hilbertcurves.pdf Graphic file (type pdf)
<use graphics/hilbertcurves.pdf>

Underfull \hbox (badness 10000) in paragraph at lines 519--522

 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.525 \begin{docspec}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.525 \begin{docspec}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.525 \begin{docspec}
                     
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.525 \begin{docspec}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.525 \begin{docspec}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.525 \begin{docspec}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.525 \begin{docspec}
                     
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.525 \begin{docspec}
                     
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.525 \begin{docspec}
                     
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.525 \begin{docspec}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.525 \begin{docspec}
                     
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.525 \begin{docspec}
                     
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.525 \begin{docspec}
                     
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.


Package Fancyhdr Warning: \headheight is too small (14.0pt): 
 Make it at least 25.25005pt.
 We now make it that large for the rest of the document.
 This may cause the page layout to be inconsistent, however.

[25]
LaTeX Font Info:    Try loading font information for TU+ppl on input line 541.
LaTeX Font Info:    No file TUppl.fd. on input line 541.


LaTeX Font Warning: Font shape `TU/ppl/m/n' undefined
(Font)              using `TU/lmr/m/n' instead on input line 541.

(d:/texlive/2017/texmf-dist/tex/latex/microtype/mt-ppl.cfg
File: mt-ppl.cfg 2005/11/16 v1.6 microtype config. file: Palatino (RS)
)
Package microtype Info: Loading generic protrusion settings for font family
(microtype)             `ppl' (encoding: TU).
(microtype)             For optimal results, create family-specific settings.
(microtype)             See the microtype manual for details.

Overfull \hbox (8.87404pt too wide) in paragraph at lines 563--564
\TU/lmr/m/n/10 this limitation, the Tufte-L[]T[]X document classes provide a []
\TU/lmtt/m/n/10 \morefloats[][] 
 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.570 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.570 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.570 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.570 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.570 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.570 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.570 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.570 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.570 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.570 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.570 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.570 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.570 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[26]
Overfull \hbox (61.68002pt too wide) in paragraph at lines 584--585
[] []\TU/lmr/m/it/10 Vertical alignment[] \TU/lmr/m/n/10 To override the vertic
al alignment, use the \TU/lmtt/m/n/10 \setfloatalignment[] 
 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.620 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.620 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.620 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.620 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.620 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.620 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.620 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.620 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.620 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.620 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.620 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.620 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.620 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.


Package Fancyhdr Warning: \headheight is too small (14.0pt): 
 Make it at least 25.25005pt.
 We now make it that large for the rest of the document.
 This may cause the page layout to be inconsistent, however.

[27]
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.647 When setting strings of \allcaps{ALL CAPS}
                                                 or \smallcaps{small caps}, ...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.647 ...lcaps{ALL CAPS} or \smallcaps{small caps}
                                                  , the letter\-spacing---th...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
! Argument of \MakeTextUppercase has an extra }.
<inserted text> 
                \par 
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextUppercase was complete.
<to be read again> 
                   \par 
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.647 ...strings of \allcaps{FULL CAPITAL LETTERS}
                                                  , and the \doccmddef{small...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmroman10-regular]:mapping=tex-text;!
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \protect doesn't match its definition.
\GenericError ->\protect \GenericError  
                                        
l.647 ...ing for \smallcaps{small capital letters}
                                                  . These commands will also...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
Missing character: There is no 
 in font [lmromancaps10-regular]:mapping=tex-text;!
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.648 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.648 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.648 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.648 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.648 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.648 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.648 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.648 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.648 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.648 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.648 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.648 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.648 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[28]

LaTeX Warning: Marginpar on page 29 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.658 ...will set the paper size to \smallcaps{A4}
                                                   instead of the default \s...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.658 ...will set the paper size to \smallcaps{A4}
                                                   instead of the default \s...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.658 ...will set the paper size to \smallcaps{A4}
                                                   instead of the default \s...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.658 ...will set the paper size to \smallcaps{A4}
                                                   instead of the default \s...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.658 ...will set the paper size to \smallcaps{A4}
                                                   instead of the default \s...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.658 ...A4} instead of the default \smallcaps{US}
                                                   letter size.
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.658 ...A4} instead of the default \smallcaps{US}
                                                   letter size.
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.658 ...A4} instead of the default \smallcaps{US}
                                                   letter size.
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.658 ...A4} instead of the default \smallcaps{US}
                                                   letter size.
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.658 ...A4} instead of the default \smallcaps{US}
                                                   letter size.
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.665 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.665 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.665 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.665 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.665 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.665 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.665 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.665 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.665 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.665 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.665 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.665 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.665 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.


Package Fancyhdr Warning: \headheight is too small (14.0pt): 
 Make it at least 25.25005pt.
 We now make it that large for the rest of the document.
 This may cause the page layout to be inconsistent, however.

[29]
Overfull \hbox (2.67406pt too wide) in paragraph at lines 668--669
[]\TU/lmr/m/n/10 The []\TU/lmtt/m/n/10 bidi[][][][] \TU/lmr/m/n/10 option loads
 the \TU/lmtt/m/n/10 bidi[][] \TU/lmr/m/n/10 package which is used with X[]L[]T
[]X[] 
 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.688 \chapter
              [Customizing Tufte-LaTeX]{Customizing \TL}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[30]
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <20.74> on input line 688.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <14.4> on input line 688.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <12> on input line 688.
 [31

]

LaTeX Warning: Marginpar on page 32 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.767 \item[\doccls{raggedouter}]
                                  Sets the text ragged left if it falls on t...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[32]
Overfull \hbox (36.13501pt too wide) in paragraph at lines 772--774
[]\TU/lmtt/m/n/9 \documentclass[symmetric,justified,marginals=raggedouter]{tuft
e-book}  
 []

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.797 \chapter
              {Compatibility Issues}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.797 \chapter
              {Compatibility Issues}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.797 \chapter
              {Compatibility Issues}
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.797 \chapter
              {Compatibility Issues}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.797 \chapter
              {Compatibility Issues}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.797 \chapter
              {Compatibility Issues}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.797 \chapter
              {Compatibility Issues}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.797 \chapter
              {Compatibility Issues}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.797 \chapter
              {Compatibility Issues}
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.797 \chapter
              {Compatibility Issues}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.797 \chapter
              {Compatibility Issues}
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.797 \chapter
              {Compatibility Issues}
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.797 \chapter
              {Compatibility Issues}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[33] [34

] [35] [36

]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.828 ... you'll find links to our \smallcaps{svn}
                                                   repository, mailing lists...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.828 ... you'll find links to our \smallcaps{svn}
                                                   repository, mailing lists...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.828 ... you'll find links to our \smallcaps{svn}
                                                   repository, mailing lists...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.828 ... you'll find links to our \smallcaps{svn}
                                                   repository, mailing lists...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.828 ... you'll find links to our \smallcaps{svn}
                                                   repository, mailing lists...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[37]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.876 \begin
            {itemize}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.876 \begin
            {itemize}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.876 \begin
            {itemize}
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.876 \begin
            {itemize}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.876 \begin
            {itemize}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.876 \begin
            {itemize}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.876 \begin
            {itemize}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.876 \begin
            {itemize}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.876 \begin
            {itemize}
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.876 \begin
            {itemize}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.876 \begin
            {itemize}
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.876 \begin
            {itemize}
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.876 \begin
            {itemize}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[38]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.906 \backmatter
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.906 \backmatter
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.906 \backmatter
                 
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.906 \backmatter
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.906 \backmatter
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.906 \backmatter
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.906 \backmatter
                 
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.906 \backmatter
                 
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.906 \backmatter
                 
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.906 \backmatter
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.906 \backmatter
                 
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.906 \backmatter
                 
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.906 \backmatter
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[39] [40

] (./main.bbl) (./main.ind [41

] [42

] [43])
Package atveryend Info: Empty hook `BeforeClearDocument' on input line 919.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.919 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.919 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.919 \end{document}
                    
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.919 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.919 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.919 \end{document}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.919 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.919 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.919 \end{document}
                    
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.919 \end{document}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.919 \end{document}
                    
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.919 \end{document}
                    
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.919 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[44]
Package atveryend Info: Empty hook `AfterLastShipout' on input line 919.
 (./main.aux)
Package atveryend Info: Empty hook `AtVeryEndDocument' on input line 919.
Package atveryend Info: Empty hook `AtEndAfterFileList' on input line 919.


LaTeX Font Warning: Size substitutions with differences
(Font)              up to 0.72pt have occurred.


LaTeX Font Warning: Some font shapes were not available, defaults substituted.

Package atveryend Info: Empty hook `AtVeryVeryEnd' on input line 919.
 )
(\end occurred when \ifvoid on line 147 was incomplete)
(\end occurred when \ifx on line 147 was incomplete) 
Here is how much of TeX's memory you used:
 13685 strings out of 493010
 202537 string characters out of 6138023
 505062 words of memory out of 5000000
 17390 multiletter control sequences out of 15000+600000
 10982 words of font info for 72 fonts, out of 8000000 for 9000
 1348 hyphenation exceptions out of 8191
 96i,14n,54p,730b,1033s stack positions out of 5000i,500n,10000p,200000b,80000s

Output written on main.xdv (44 pages, 509824 bytes).
